// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?   // "student" or "freelancer"
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt


  accounts       Account[]
  sessions       Session[]
  boards         KanbanBoard[]
  tasks          KanbanTask[]
  projects       Project[]
  templates      Template[]
  assignments    Assignment[]
  boardMembers   BoardMember[]
  comments       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model KanbanBoard {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  columns     KanbanColumn[]
  members     BoardMember[]
}

model BoardMember {
  id        String   @id @default(cuid())
  boardId   String
  userId    String
  role      String   // "admin", "editor", "viewer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board     KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model KanbanColumn {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board     KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     KanbanTask[]
}

model KanbanTask {
  id          String    @id @default(cuid())
  title       String
  description String?
  columnId    String
  priority    String?   // "low", "medium", "high"
  dueDate     DateTime?
  assignedToId String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  column      KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  comments    Comment[]
  attachments Attachment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      KanbanTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?   @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[]  @relation("CommentToComment")
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      KanbanTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  clientName  String?
  status      String    // "planning", "in-progress", "completed", "on-hold"
  budget      Decimal?  @db.Decimal(10, 2)
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // "document", "form", "email", etc.
  category    String   // "academic", "business", "personal", etc.
  content     String   @db.Text
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  course      String?
  status      String    // "not-started", "in-progress", "completed", "late"
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

