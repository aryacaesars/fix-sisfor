generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  image          String?
  hashedPassword String?
  role           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  emailVerified  DateTime?
  accounts       Account[]
  assignments    Assignment[]
  Attachment     Attachment[]
  boardMembers   BoardMember[]
  comments       Comment[]
  boards         KanbanBoard[]
  tasks          KanbanTask[]
  projects       Project[]
  sessions       Session[]
  TaskAssignee   TaskAssignee[]
  templates      Template[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model KanbanBoard {
  id          String         @id @default(cuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     BoardMember[]
  createdBy   User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  columns     KanbanColumn[]
}

model BoardMember {
  id      String      @id @default(cuid())
  boardId String
  userId  String
  role    String
  board   KanbanBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model KanbanColumn {
  id      String       @id @default(cuid())
  title   String
  boardId String
  order   Int
  board   KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   KanbanTask[]

  @@unique([boardId, order])
}

model KanbanTask {
  id           String         @id @default(cuid())
  title        String
  description  String?
  columnId     String
  priority     String         @default("medium")
  dueDate      DateTime?
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  labels       String[]
  attachments  Attachment[]
  comments     Comment[]
  column       KanbanColumn   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdBy    User           @relation(fields: [createdById], references: [id])
  TaskAssignee TaskAssignee[]
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  taskId    String
  userId    String
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    Comment?   @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentToComment")
  task      KanbanTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id         String     @id @default(cuid())
  name       String
  url        String
  type       String
  size       Int
  taskId     String
  uploadedAt DateTime   @default(now())
  userId     String
  task       KanbanTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id            String   @id @default(cuid())
  title         String
  description   String?
  clientName    String
  status        String   @default("active")
  budget        Float
  startDate     DateTime
  endDate       DateTime
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  kanbanBoardId String?
  assignedTo    String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String
  category    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  link        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  course      String?
  status      String    @default("not-started")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaskAssignee {
  id         String     @id
  taskId     String
  userId     String
  KanbanTask KanbanTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}
